import pdfkit
from bs4 import BeautifulSoup
import os
from datetime import datetime
import json

class PDFGenerator:
    """Generate PDF from HTML cause list"""
    
    def __init__(self):
        # Configure pdfkit (path to wkhtmltopdf)
        # Windows: Download from https://wkhtmltopdf.org/downloads.html
        self.config = pdfkit.configuration(wkhtmltopdf=r'C:\Program Files (x86)\wkhtmltopdf\bin\wkhtmltopdf.exe')
        
        # For Linux/Mac, usually no config needed
        
        
        self.output_dir = "downloads/pdfs"
        os.makedirs(self.output_dir, exist_ok=True)
    
    def clean_html(self, html_content):
        """Keep ALL cause list content, remove only the form"""
        try:
            soup = BeautifulSoup(html_content, 'html.parser')
        
        # Remove scripts and styles
            for element in soup(["script", "style"]):
                element.decompose()
        
        # Find and remove ONLY the search form (before results)
        # The form usually has specific elements we can target
            for form in soup.find_all('form'):
            # Check if this is the search form (not part of results)
                if form.find(string=lambda text: text and "Please Enter the Captcha" in text):
                    form.decompose()
                    print("‚úÖ Removed search form")
        
        # Remove specific form-related divs BEFORE the results
            for elem in soup.find_all('div', class_=['form-row', 'wai-datepicker']):
                elem.decompose()
        
        # Remove the "All fields marked with" text if it appears
            for elem in soup.find_all(string=lambda text: text and "All fields marked with" in text):
                parent = elem.find_parent('div')
                if parent and not parent.find('table'):  # Only if not near tables
                    parent.decompose()
        
        # Keep everything else (all tables, headings, case data)
            return str(soup)
        
        except Exception as e:
            print(f"‚ö†Ô∏è  Error cleaning HTML: {e}")
            return html_content
    
    def create_styled_html(self, content, court_name, date):
        """Create a well-formatted HTML with styling"""
        styled_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    margin: 20px;
                }}
                .header {{
                    text-align: center;
                    margin-bottom: 30px;
                    border-bottom: 2px solid #333;
                    padding-bottom: 10px;
                }}
                .header h1 {{
                    color: #8B0000;
                    margin: 10px 0;
                }}
                .header h2 {{
                    color: #333;
                    margin: 5px 0;
                    font-size: 18px;
                }}
                .info {{
                    margin: 20px 0;
                    font-weight: bold;
                }}
                table {{
                    width: 100%;
                    border-collapse: collapse;
                    margin: 20px 0;
                }}
                table, th, td {{
                    border: 1px solid #333;
                }}
                th {{
                    background-color: #8B0000;
                    color: white;
                    padding: 10px;
                    text-align: left;
                }}
                td {{
                    padding: 8px;
                }}
                tr:nth-child(even) {{
                    background-color: #f2f2f2;
                }}
                .footer {{
                    margin-top: 30px;
                    text-align: center;
                    font-size: 12px;
                    color: #666;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>District Courts, New Delhi</h1>
                <h2>Cause List / Daily Board</h2>
            </div>
            <div class="info">
                <p><strong>Court:</strong> {court_name}</p>
                <p><strong>Date:</strong> {date}</p>
                <p><strong>Generated on:</strong> {datetime.now().strftime("%d-%m-%Y %H:%M:%S")}</p>
            </div>
            {content}
            <div class="footer">
                <p>Generated by eCourts Scraper | Delhi District Courts</p>
            </div>
        </body>
        </html>
        """
        return styled_html
    
    def generate_pdf(self, html_content, filename, court_name, date):
        """
        Generate PDF from HTML content
        Returns: path to generated PDF
        """
        try:
            # Clean HTML
            cleaned_html = self.clean_html(html_content)
            
            # Create styled HTML
            styled_html = self.create_styled_html(cleaned_html, court_name, date)
            
            # Create output path
            safe_filename = filename.replace('/', '-').replace('\\', '-')
            output_path = os.path.join(self.output_dir, safe_filename)
            
            # PDF options
            options = {
                'page-size': 'A4',
                'margin-top': '0.5in',
                'margin-right': '0.5in',
                'margin-bottom': '0.5in',
                'margin-left': '0.5in',
                'encoding': "UTF-8",
                'no-outline': None,
                'enable-local-file-access': None
            }
            
            # Generate PDF
            if self.config:
                pdfkit.from_string(styled_html, output_path, configuration=self.config, options=options)
            else:
                pdfkit.from_string(styled_html, output_path, options=options)
            
            print(f"‚úÖ PDF generated: {output_path}")
            return output_path
            
        except Exception as e:
            print(f"‚ùå Error generating PDF: {e}")
            print("üí° Falling back to HTML save...")
            
            # Fallback: Save as HTML if PDF generation fails
            html_path = output_path.replace('.pdf', '.html')
            with open(html_path, 'w', encoding='utf-8') as f:
                f.write(styled_html)
            
            print(f"‚úÖ HTML saved: {html_path}")
            return html_path
    
    def save_json_data(self, data, filename):
        """Save data as JSON"""
        try:
            json_dir = "downloads/json"
            os.makedirs(json_dir, exist_ok=True)
            
            json_path = os.path.join(json_dir, filename)
            
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ JSON saved: {json_path}")
            return json_path
        except Exception as e:
            print(f"‚ùå Error saving JSON: {e}")
            return None


# Test function
if __name__ == "__main__":
    generator = PDFGenerator()
    
    # Test HTML
    test_html = """
    <table>
        <tr>
            <th>Serial No.</th>
            <th>Case Number</th>
            <th>Party Names</th>
        </tr>
        <tr>
            <td>1</td>
            <td>CS/12345/2025</td>
            <td>ABC vs XYZ</td>
        </tr>
    </table>
    """
    
    pdf_path = generator.generate_pdf(
        test_html,
        "test_causelist.pdf",
        "Test Court - Judge-01",
        "10/17/2025"
    )
    
    print(f"Test PDF: {pdf_path}")